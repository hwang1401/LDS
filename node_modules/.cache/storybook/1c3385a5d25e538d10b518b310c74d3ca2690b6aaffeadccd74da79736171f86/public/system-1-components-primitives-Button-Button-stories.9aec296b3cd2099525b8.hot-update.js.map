{"version":3,"file":"system-1-components-primitives-Button-Button-stories.9aec296b3cd2099525b8.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://lds/./design-systems/system-1/components/primitives/Button/Button.stories.jsx"],"sourcesContent":["import React from 'react';\nimport Button from './index';\n\n// More on how to set up stories at: https://storybook.js.org/docs/writing-stories\nconst meta = {\n  title: 'Button',\n  component: Button,\n  parameters: {\n    layout: 'centered',\n    docs: {\n      description: {\n        component: `\n# 버튼 컴포넌트\n\n버튼은 사용자가 작업을 시작하고 결정을 내릴 수 있게 해주는 상호작용 요소입니다. \n버튼은 사용자 인터페이스의 핵심 요소로, 다양한 스타일과 크기로 제공됩니다.\n\n## 사용 예시\n\n\\`\\`\\`jsx\nimport { Button } from '@design-system/components';\n\nfunction Example() {\n  return (\n    <Button \n      variant=\"primary\" \n      style=\"filled\"\n      size=\"md\"\n      rightIcon={true}\n    >\n      버튼 텍스트\n    </Button>\n  );\n}\n\\`\\`\\`\n\n## 접근성\n\n- 버튼은 \\`button\\` HTML 요소를 사용하여 키보드 접근성을 기본적으로 보장합니다.\n- 아이콘만 사용하는 버튼의 경우 \\`aria-label\\` 속성을 통해 스크린 리더 지원을 제공합니다.\n        `\n      }\n    }\n  },\n  tags: ['autodocs'],\n  argTypes: {\n    variant: {\n      control: 'select', \n      options: ['primary', 'secondary', 'cta'],\n      description: '버튼 종류(상황별)',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'primary' }\n      }\n    },\n    style: {\n      control: 'select',\n      options: ['filled', 'outlined', 'transparent'],\n      description: '버튼 스타일',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'filled' }\n      }\n    },\n    size: {\n      control: 'select',\n      options: ['xs', 'sm', 'md', 'lg', 'xl'],\n      description: '버튼 크기',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'md' }\n      }\n    },\n    fullWidth: {\n      control: 'boolean',\n      description: '전체 너비 적용 여부',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' }\n      }\n    },\n    disabled: {\n      control: 'boolean',\n      description: '비활성화 여부',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' }\n      }\n    },\n    leftIcon: {\n      control: 'boolean',\n      description: '왼쪽 아이콘 표시 여부',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' }\n      }\n    },\n    rightIcon: {\n      control: 'boolean',\n      description: '오른쪽 아이콘 표시 여부',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' }\n      }\n    },\n    iconOnly: {\n      control: 'boolean',\n      description: '아이콘만 표시 여부',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' }\n      }\n    },\n    children: {\n      control: 'text',\n      description: '버튼 내용',\n      table: {\n        type: { summary: 'React.ReactNode' }\n      }\n    },\n    onClick: {\n      description: '클릭 이벤트 핸들러',\n      table: {\n        type: { summary: 'function' }\n      },\n      action: 'clicked'\n    }\n  }\n};\n\nexport default meta;\n\n// Variants\nexport const Variants = {\n  name: '버튼 종류(Variants)',\n  render: () => (\n    <div style={{ display: 'flex', gap: '16px', flexWrap: 'wrap' }}>\n      <Button variant=\"primary\" style=\"filled\">Primary 버튼</Button>\n      <Button variant=\"secondary\" style=\"filled\">Secondary 버튼</Button>\n      <Button variant=\"cta\" style=\"filled\">CTA 버튼</Button>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: '버튼은 Primary, Secondary, CTA 세 가지 종류로 제공됩니다. 각 종류는 목적과 중요도에 따라 다른 시각적 스타일을 가집니다.'\n      }\n    }\n  }\n};\n\n// Styles\nexport const Styles = {\n  name: '버튼 스타일(Styles)',\n  render: () => (\n    <div style={{ display: 'flex', gap: '16px', flexDirection: 'column' }}>\n      <div style={{ display: 'flex', gap: '16px' }}>\n        <Button variant=\"primary\" style=\"filled\">Filled</Button>\n        <Button variant=\"primary\" style=\"outlined\">Outlined</Button>\n        <Button variant=\"primary\" style=\"transparent\">Transparent</Button>\n      </div>\n      <div style={{ display: 'flex', gap: '16px' }}>\n        <Button variant=\"secondary\" style=\"filled\">Filled</Button>\n        <Button variant=\"secondary\" style=\"outlined\">Outlined</Button>\n        <Button variant=\"secondary\" style=\"transparent\">Transparent</Button>\n      </div>\n      <div style={{ display: 'flex', gap: '16px' }}>\n        <Button variant=\"cta\" style=\"filled\">Filled</Button>\n        <Button variant=\"cta\" style=\"outlined\">Outlined</Button>\n        <Button variant=\"cta\" style=\"transparent\">Transparent</Button>\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: '버튼은 Filled, Outlined, Transparent 세 가지 스타일로 제공됩니다. 각 스타일은 UI의 시각적 계층 구조에 맞게 선택할 수 있습니다.'\n      }\n    }\n  }\n};\n\n// Sizes\nexport const Sizes = {\n  name: '버튼 크기(Sizes)',\n  render: () => (\n    <div style={{ display: 'flex', gap: '16px', alignItems: 'center' }}>\n      <Button variant=\"primary\" size=\"xs\">XS 버튼</Button>\n      <Button variant=\"primary\" size=\"sm\">SM 버튼</Button>\n      <Button variant=\"primary\" size=\"md\">MD 버튼</Button>\n      <Button variant=\"primary\" size=\"lg\">LG 버튼</Button>\n      <Button variant=\"primary\" size=\"xl\">XL 버튼</Button>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: '버튼은 5가지 크기(XS, SM, MD, LG, XL)로 제공됩니다. 상황과 레이아웃에 맞는 적절한 크기를 선택할 수 있습니다.'\n      }\n    }\n  }\n};\n\n// Icons\nexport const WithIcons = {\n  name: '아이콘 버튼(Icons)',\n  render: () => (\n    <div style={{ display: 'flex', gap: '16px', flexDirection: 'column' }}>\n      <div style={{ display: 'flex', gap: '16px' }}>\n        <Button variant=\"primary\" leftIcon={true}>왼쪽 아이콘</Button>\n        <Button variant=\"primary\" rightIcon={true}>오른쪽 아이콘</Button>\n        <Button variant=\"primary\" iconOnly={true} aria-label=\"아이콘만\"></Button>\n      </div>\n      <div style={{ display: 'flex', gap: '16px' }}>\n        <Button variant=\"secondary\" leftIcon={true}>왼쪽 아이콘</Button>\n        <Button variant=\"secondary\" rightIcon={true}>오른쪽 아이콘</Button>\n        <Button variant=\"secondary\" iconOnly={true} aria-label=\"아이콘만\"></Button>\n      </div>\n      <div style={{ display: 'flex', gap: '16px' }}>\n        <Button variant=\"cta\" leftIcon={true}>왼쪽 아이콘</Button>\n        <Button variant=\"cta\" rightIcon={true}>오른쪽 아이콘</Button>\n        <Button variant=\"cta\" iconOnly={true} aria-label=\"아이콘만\"></Button>\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: '버튼은 왼쪽, 오른쪽 또는 아이콘만 표시하는 옵션을 제공합니다. 아이콘은 버튼의 목적을 시각적으로 강화하는 데 도움이 됩니다.'\n      }\n    }\n  }\n};\n\n// States\nexport const States = {\n  name: '버튼 상태(States)',\n  render: () => (\n    <div style={{ display: 'flex', gap: '16px', flexDirection: 'column' }}>\n      <div style={{ display: 'flex', gap: '16px' }}>\n        <Button variant=\"primary\">기본 상태</Button>\n        <Button variant=\"primary\" disabled={true}>비활성화 상태</Button>\n      </div>\n      <div style={{ display: 'flex', gap: '16px' }}>\n        <Button variant=\"secondary\">기본 상태</Button>\n        <Button variant=\"secondary\" disabled={true}>비활성화 상태</Button>\n      </div>\n      <div style={{ display: 'flex', gap: '16px' }}>\n        <Button variant=\"cta\">기본 상태</Button>\n        <Button variant=\"cta\" disabled={true}>비활성화 상태</Button>\n      </div>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: '버튼은 기본 상태와 비활성화 상태를 갖습니다. 호버, 활성화, 포커스 등의 상호작용 상태는 CSS를 통해 자동으로 처리됩니다.'\n      }\n    }\n  }\n};\n\n// Width\nexport const FullWidth = {\n  name: '전체 너비(Full Width)',\n  render: () => (\n    <div style={{ display: 'flex', gap: '16px', flexDirection: 'column', width: '100%', maxWidth: '400px' }}>\n      <Button variant=\"primary\" fullWidth={true}>기본 버튼</Button>\n      <Button variant=\"secondary\" fullWidth={true}>전체 너비 버튼</Button>\n      <Button variant=\"cta\" fullWidth={true}>컨테이너 너비에 맞춤</Button>\n    </div>\n  ),\n  parameters: {\n    docs: {\n      description: {\n        story: '버튼은 fullWidth 속성을 통해 컨테이너의 전체 너비를 차지하도록 설정할 수 있습니다. 모바일 환경이나 폼 요소와 함께 사용할 때 유용합니다.'\n      }\n    }\n  }\n};\n\n// Default (for controls)\nexport const Playground = {\n  name: '플레이그라운드',\n  args: {\n    variant: 'primary',\n    style: 'filled',\n    size: 'md',\n    fullWidth: false,\n    disabled: false,\n    leftIcon: false,\n    rightIcon: false,\n    iconOnly: false,\n    children: '버튼 텍스트'\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: '다양한 속성을 직접 조정하여 버튼을 커스터마이징해보세요.'\n      }\n    }\n  }\n};\n\n"],"names":[],"sourceRoot":""}