{"version":3,"file":"design-systems_system-1_components_primitives_Button_index_jsx.a76b7f63ca1605239ca6.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAXA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAhBA;AAAA;AAAA;AAkBA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://lds/./design-systems/system-1/components/primitives/Button/index.jsx","webpack://lds/./shared/components/Icon/index.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../../../../../shared/components/Icon';\nimport './Button.css';\n\n/**\n * 버튼 컴포넌트\n * @param {object} props - 컴포넌트 속성\n * @param {'filled'|'outlined'|'transparent'} props.style - 버튼 스타일\n * @param {'xs'|'sm'|'md'|'lg'|'xl'} props.size - 버튼 크기\n * @param {boolean} props.fullWidth - 전체 너비 적용 여부\n * @param {boolean} props.disabled - 비활성화 여부\n * @param {boolean} props.leftIcon - 왼쪽 아이콘 표시 여부\n * @param {boolean} props.rightIcon - 오른쪽 아이콘 표시 여부\n * @param {boolean} props.iconOnly - 아이콘만 표시 여부\n * @param {React.ReactNode} props.children - 버튼 내용\n * @param {function} props.onClick - 클릭 이벤트 핸들러\n */\nconst Button = ({\n  variant = 'primary',\n  style = 'filled',\n  size = 'md',\n  fullWidth = false,\n  disabled = false,\n  leftIcon = false,\n  rightIcon = false,\n  iconOnly = false,\n  children,\n  onClick,\n  ...rest\n}) => {\n  const buttonClasses = [\n    'btn',\n    `btn-${variant}`,\n    `btn-${style}`,\n    `btn-${size}`,\n    fullWidth ? 'btn-full-width' : '',\n    iconOnly ? 'btn-icon-only' : '',\n  ].filter(Boolean).join(' ');\n\n  // 아이콘 크기는 버튼 크기보다 한 단계 작게 설정\n  const getIconSize = (btnSize) => {\n    const sizeMap = {\n      xs: 'xs',\n      sm: 'xs',\n      md: 'sm',\n      lg: 'md',\n      xl: 'lg'\n    };\n    return sizeMap[btnSize] || 'sm';\n  };\n\n  // 버튼 타입에 따른 기본 아이콘 선택\n  const getDefaultIcon = (type) => {\n    const iconMap = {\n      leftIcon: {\n        primary: 'line-icons/Arrow/Chevron/up',\n        secondary: 'line-icons/Arrow/Chevron/up', \n        cta: 'line-icons/Arrow/Chevron/up'\n      },\n      rightIcon: {\n        primary: 'line-icons/Arrow/Chevron/right',\n        secondary: 'line-icons/Arrow/Chevron/right',\n        cta: 'line-icons/Arrow/Chevron/right'\n      },\n      iconOnly: {\n        primary: 'line-icons/Arrow/Chevron/right',\n        secondary: 'line-icons/Arrow/Chevron/up',\n        cta: 'line-icons/Arrow/Chevron/up'\n      }\n    };\n    \n    return iconMap[type][variant] || iconMap[type].primary;\n  };\n\n  // 버튼 상태와 스타일에 따른 시멘틱 토큰 색상 반환\n  const getSemanticColor = () => {\n    // filled 스타일은 oncolor 토큰 사용\n    if (style === 'filled') {\n      return `var(--semantic-color-${variant}-oncolor-global)`;\n    } \n    // outlined 또는 transparent 스타일은 foreground 토큰 사용\n    else {\n      if (disabled) {\n        return `var(--semantic-color-${variant}-foreground-1-disabled)`;\n      }\n      return `var(--semantic-color-${variant}-foreground-1-rest)`;\n    }\n  };\n\n  const iconSize = getIconSize(size);\n  const iconColor = getSemanticColor();\n\n  // iconOnly인 경우 버튼 내용은 아이콘만 표시\n  if (iconOnly) {\n    return (\n      <button \n        className={buttonClasses} \n        disabled={disabled}\n        onClick={onClick}\n        {...rest}\n        aria-label={typeof children === 'string' ? children : 'Icon button'}\n      >\n        <span className=\"btn-icon\" style={{ '--icon-color': iconColor }}>\n          <Icon name={getDefaultIcon('iconOnly')} size={iconSize} />\n        </span>\n      </button>\n    );\n  }\n\n  return (\n    <button \n      className={buttonClasses} \n      disabled={disabled}\n      onClick={onClick}\n      {...rest}\n    >\n      {leftIcon && (\n        <span className=\"btn-icon btn-icon-left\" style={{ '--icon-color': iconColor }}>\n          <Icon name={getDefaultIcon('leftIcon')} size={iconSize} />\n        </span>\n      )}\n      <span className=\"btn-text\">{children}</span>\n      {rightIcon && (\n        <span className=\"btn-icon btn-icon-right\" style={{ '--icon-color': iconColor }}>\n          <Icon name={getDefaultIcon('rightIcon')} size={iconSize} />\n        </span>\n      )}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  style: PropTypes.oneOf(['filled', 'outlined', 'transparent']),\n  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n  fullWidth: PropTypes.bool,\n  disabled: PropTypes.bool,\n  leftIcon: PropTypes.bool,\n  rightIcon: PropTypes.bool,\n  iconOnly: PropTypes.bool,\n  children: PropTypes.node,\n  onClick: PropTypes.func\n};\n\nexport default Button; ","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * 인라인 SVG를 사용하는 Icon 컴포넌트\n * 시멘틱 토큰으로 아이콘 색상과 크기를 제어할 수 있습니다.\n * \n * @param {Object} props - 컴포넌트 속성\n * @param {string} props.name - 아이콘 이름 (경로 포함, 예: \"logo/brand-logo\" 또는 \"line icons/home\")\n * @param {string} props.size - 아이콘 크기 (xs, sm, md, lg, xl)\n * @param {string} props.className - 추가적인 CSS 클래스\n * @param {function} props.onClick - 클릭 이벤트 핸들러\n */\nconst Icon = ({ name, size = 'md', className = '', onClick, ...rest }) => {\n  const [svgContent, setSvgContent] = useState('');\n  const [error, setError] = useState(false);\n\n  // 아이콘 크기 매핑\n  const sizeMap = {\n    xs: '16px',\n    sm: '20px',\n    md: '24px',\n    lg: '32px',\n    xl: '40px'\n  };\n\n  // 아이콘 이름 경로 정규화\n  const normalizePath = (iconName) => {\n    // 공백이 있는 경로 처리\n    return iconName.replace(/\\s+/g, '%20');\n  };\n\n  useEffect(() => {\n    // SVG 파일 가져오기\n    const fetchSvg = async () => {\n      try {\n        // 아이콘 경로 정규화\n        const normalizedPath = normalizePath(name);\n        const res = await fetch(`/shared/tokens/icons/${normalizedPath}.svg`);\n        \n        if (!res.ok) {\n          throw new Error(`Failed to fetch icon: ${name}`);\n        }\n        \n        const svgText = await res.text();\n        setSvgContent(svgText);\n      } catch (err) {\n        console.error('Error loading SVG:', err);\n        setError(true);\n      }\n    };\n\n    fetchSvg();\n  }, [name]);\n\n  // SVG 콘텐츠를 React 엘리먼트로 변환\n  const createSvgElement = () => {\n    if (!svgContent) {\n      return null;\n    }\n\n    // viewBox, xmlns 등 메타 속성 유지하면서 width, height 업데이트\n    const svgElement = document.createElement('div');\n    svgElement.innerHTML = svgContent;\n    const svgNode = svgElement.firstChild;\n    \n    // width, height 속성 추출하고 제거 (CSS로 제어하기 위해)\n    const width = svgNode.getAttribute('width');\n    const height = svgNode.getAttribute('height');\n    const viewBox = svgNode.getAttribute('viewBox') || `0 0 ${width} ${height}`;\n    \n    // 기존 내용 유지\n    const innerContent = svgNode.innerHTML;\n    \n    // 색상 속성을 현재 색상(currentColor)으로 설정 (CSS 변수로 제어하기 위함)\n    const processedContent = innerContent.replace(/fill=\"[^\"]*\"/g, 'fill=\"currentColor\"');\n    \n    // 최종 SVG HTML 문자열\n    const finalSvg = `<svg viewBox=\"${viewBox}\" xmlns=\"http://www.w3.org/2000/svg\">${processedContent}</svg>`;\n    \n    return finalSvg;\n  };\n\n  // CSS 변수 적용을 위한 스타일\n  const iconStyle = {\n    width: sizeMap[size] || sizeMap.md,\n    height: sizeMap[size] || sizeMap.md,\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: 'inherit' // currentColor를 통해 부모 요소의 색상 상속\n  };\n\n  // 에러 발생 시 플레이스홀더 표시\n  if (error) {\n    return (\n      <div \n        className={`icon icon-${size} ${className}`} \n        style={iconStyle}\n          onClick={onClick}\n          {...rest}\n      >\n        ⚠️\n      </div>\n    );\n  }\n\n  return (\n    <div \n      className={`icon icon-${size} ${className}`} \n      style={iconStyle}\n      onClick={onClick}\n      dangerouslySetInnerHTML={{ __html: createSvgElement() }}\n      {...rest}\n    />\n  );\n};\n\nIcon.propTypes = {\n  name: PropTypes.string.isRequired,\n  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n  className: PropTypes.string,\n  onClick: PropTypes.func\n};\n\nexport default Icon; "],"names":[],"sourceRoot":""}