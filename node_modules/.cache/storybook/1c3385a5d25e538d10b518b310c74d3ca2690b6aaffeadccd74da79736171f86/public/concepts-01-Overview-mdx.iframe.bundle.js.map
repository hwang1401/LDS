{"version":3,"file":"concepts-01-Overview-mdx.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://lds/./docs/stories/concepts/01-Overview.mdx","webpack://lds/./node_modules/@mdx-js/react/lib/index.js","webpack://lds/./node_modules/@storybook/blocks/dist/ sync","webpack://lds/./node_modules/@storybook/core/dist/components/ sync","webpack://lds/./node_modules/@storybook/core/dist/theming/ sync"],"sourcesContent":["\nimport React from 'react';\n\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"C:\\\\Users\\\\User\\\\Desktop\\\\Web파트\\\\LDS\\\\node_modules\\\\@storybook\\\\addon-docs\\\\dist\\\\shims\\\\mdx-react-shim.mjs\";\nimport {Meta} from '@storybook/blocks';\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(Meta, {\n      title: \"Concepts/01. 디자인 시스템 개요\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"디자인-시스템-개요\",\n      children: \"디자인 시스템 개요\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"디자인-시스템의-정의와-목적\",\n      children: \"디자인 시스템의 정의와 목적\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"디자인 시스템은 제품 개발에 필요한 디자인 원칙, 컴포넌트, 패턴을 체계적으로 정리한 표준화된 시스템입니다. 이는 다음과 같은 목적을 가집니다:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"일관성 유지\"\n        }), \": 모든 제품과 서비스에서 일관된 사용자 경험 제공\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"개발 효율성\"\n        }), \": 재사용 가능한 컴포넌트로 개발 시간 단축\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"협업 개선\"\n        }), \": 디자이너와 개발자 간 명확한 커뮤니케이션 체계 수립\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"확장성\"\n        }), \": 새로운 기능이나 제품의 빠른 확장 지원\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"아키텍처-구조\",\n      children: \"아키텍처 구조\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"LDS 디자인 시스템은 다음과 같은 폴더 구조로 구성됩니다:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"project/\\r\\n├── design-systems/          # 디자인 시스템 정의\\r\\n│   ├── system-1/            # 디자인 시스템 1 (예: 서비스 A용)\\r\\n│   │   ├── tokens/          # 토큰 정의\\r\\n│   │   │   ├── semantic.json\\r\\n│   │   ├── components/      # 컴포넌트 라이브러리\\r\\n│   │   │   ├── primitives/  # 기본 UI 요소\\r\\n│   │   │   ├── compounds/   # 복합 UI 요소\\r\\n│   │   │   └── patterns/    # 패턴\\r\\n│   │   ├── styles/          # 생성된 CSS 변수\\r\\n│   │   │   └── variables.css\\r\\n│   │   └── shared/          # 시스템 1 내부에서만 공유되는 리소스\\r\\n│   ├── system-2/            # 디자인 시스템 2 (예: 서비스 B용)\\r\\n│   └── shared/              # 모든 디자인 시스템이 공유하는 리소스\\r\\n│       └── tokens/          # 공유 토큰\\r\\n│           └── foundation.json\\r\\n├── scripts/                 # 빌드 스크립트\\r\\n│   └── config.js            # 토큰 변환 설정\\r\\n├── .storybook/             # 스토리북 설정\\r\\n└── package.json            # 의존성 관리\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"핵심-원칙\",\n      children: \"핵심 원칙\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"공유와 독립성\"\n        }), \": 파운데이션 토큰은 공유하되, 각 디자인 시스템은 독자적인 시멘틱 토큰 정의\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"계층 구조\"\n        }), \": Primitives → Compounds → Patterns 순으로 컴포넌트 구성\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"이식성\"\n        }), \": 각 디자인 시스템은 어떤 서비스에도 적용 가능하도록 독립적으로 구성\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"토큰 중심 설계\"\n        }), \": 모든 디자인 요소는 토큰으로 정의되고 관리됨\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nexport default function MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\n","/**\n * @import {MDXComponents} from 'mdx/types.js'\n * @import {Component, ReactElement, ReactNode} from 'react'\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {ReactElement}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/@storybook/blocks/dist sync recursive\";\nmodule.exports = webpackEmptyContext;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/@storybook/core/dist/components sync recursive\";\nmodule.exports = webpackEmptyContext;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/@storybook/core/dist/theming sync recursive\";\nmodule.exports = webpackEmptyContext;"],"names":[],"sourceRoot":""}