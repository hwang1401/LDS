{"version":3,"file":"system-1-components-primitives-Button-Button-stories.abbd4a92a04980eac935.hot-update.js","mappingssources":["webpack://lds/./shared/components/Icon/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * 인라인 SVG를 사용하는 Icon 컴포넌트\n * 원본 아이콘을 그대로 불러오며, 상위 컴포넌트에서 크기와 색상을 시멘틱 토큰으로 조절할 수 있습니다.\n * \n * @param {Object} props - 컴포넌트 속성\n * @param {string} props.name - 아이콘 이름 (경로 포함, 예: \"logo/brand-logo\" 또는 \"line icons/home\")\n * @param {string} props.size - 아이콘 크기 (실제 크기는 상위 컴포넌트에서 CSS로 제어)\n * @param {string} props.className - 추가적인 CSS 클래스\n * @param {function} props.onClick - 클릭 이벤트 핸들러\n */\nconst Icon = ({ name, size = 'md', className = '', onClick, ...rest }) => {\n  const [svgContent, setSvgContent] = useState('');\n  const [error, setError] = useState(false);\n\n  // 아이콘 이름 경로 정규화\n  const normalizePath = (iconName) => {\n    // 공백이 있는 경로 처리\n    const normalized = iconName\n      .replace(/\\s+/g, '-') // 공백을 하이픈으로 변경\n      .replace(/\\/+/g, '/') // 중복 슬래시 제거\n      .toLowerCase(); // 소문자로 변환 (대소문자 구분 문제 해결)\n    \n    return normalized;\n  };\n\n  useEffect(() => {\n    // SVG 파일 가져오기\n    const fetchSvg = async () => {\n      try {\n        // 아이콘 경로 정규화\n        const normalizedPath = normalizePath(name);\n        console.log('Fetching icon:', normalizedPath);\n        \n        // 원래 경로로 시도\n        let res = await fetch(`/shared/tokens/icons/${normalizedPath}.svg`);\n        \n        // 원래 경로가 실패하면 하이픈을 제거한 경로 시도\n        if (!res.ok) {\n          const pathWithoutHyphen = normalizedPath.replace(/-/g, '/');\n          console.log('Retrying with path:', pathWithoutHyphen);\n          res = await fetch(`/shared/tokens/icons/${pathWithoutHyphen}.svg`);\n        }\n        \n        if (!res.ok) {\n          throw new Error(`Failed to fetch icon: ${name}`);\n        }\n        \n        const svgText = await res.text();\n        setSvgContent(svgText);\n      } catch (err) {\n        console.error('Error loading SVG:', err);\n        setError(true);\n      }\n    };\n\n    fetchSvg();\n  }, [name]);\n\n  // SVG 콘텐츠를 React 엘리먼트로 변환\n  const createSvgElement = () => {\n    if (!svgContent) {\n      return null;\n    }\n\n    // viewBox, xmlns 등 메타 속성 유지하면서 width, height 속성 제거\n    const svgElement = document.createElement('div');\n    svgElement.innerHTML = svgContent;\n    const svgNode = svgElement.firstChild;\n    \n    // width, height 속성 추출하고 제거 (CSS로 제어하기 위해)\n    svgNode.removeAttribute('width');\n    svgNode.removeAttribute('height');\n    const viewBox = svgNode.getAttribute('viewBox');\n    \n    // 기존 내용 유지\n    const innerContent = svgNode.innerHTML;\n    \n    // 색상 속성을 현재 색상(currentColor)으로 설정 (CSS 변수로 제어하기 위함)\n    const processedContent = innerContent.replace(/fill=\"[^\"]*\"/g, 'fill=\"currentColor\"');\n    \n    // 최종 SVG HTML 문자열\n    const finalSvg = `<svg viewBox=\"${viewBox}\" xmlns=\"http://www.w3.org/2000/svg\">${processedContent}</svg>`;\n    \n    return finalSvg;\n  };\n\n  // 에러 발생 시 플레이스홀더 표시\n  if (error) {\n    return (\n      <div \n        className={`icon icon-${size} ${className}`} \n        onClick={onClick}\n        {...rest}\n      >\n        ⚠️\n      </div>\n    );\n  }\n\n  return (\n    <span \n      className={`icon icon-${size} ${className}`} \n      onClick={onClick}\n      dangerouslySetInnerHTML={{ __html: createSvgElement() }}\n      {...rest}\n    />\n  );\n};\n\nIcon.propTypes = {\n  name: PropTypes.string.isRequired,\n  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n  className: PropTypes.string,\n  onClick: PropTypes.func\n};\n\nexport default Icon; "],"names":[],"sourceRoot":""}