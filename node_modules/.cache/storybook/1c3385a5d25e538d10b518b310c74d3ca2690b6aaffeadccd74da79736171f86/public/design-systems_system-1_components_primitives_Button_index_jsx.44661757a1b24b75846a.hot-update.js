"use strict";
self["webpackHotUpdatelds"]("design-systems_system-1_components_primitives_Button_index_jsx",{

/***/ "./shared/components/Icon/index.jsx":
/*!******************************************!*\
  !*** ./shared/components/Icon/index.jsx ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
Object(function webpackMissingModule() { var e = new Error("Cannot find module './Icon.css'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
var _excluded = ["name", "size", "color", "onClick", "className"];
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function _objectWithoutProperties(e, t) {
  if (null == e) return {};
  var o,
    r,
    i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}




/**
 * Icon 컴포넌트 - SVG 아이콘을 표시하고 시멘틱 토큰으로 색상을 제어합니다.
 * 
 * @param {Object} props - 컴포넌트 속성
 * @param {string} props.name - 아이콘 이름 (경로 포함, 예: "line-icons/home")
 * @param {string} props.size - 아이콘 크기 (xs, sm, md, lg, xl)
 * @param {string} props.color - CSS 색상 변수 또는 값 (var(--semantic-color-primary-foreground-1-rest) 등)
 * @param {function} props.onClick - 클릭 이벤트 핸들러
 * @param {string} props.className - 추가적인 CSS 클래스
 */
var Icon = function Icon(_ref) {
  var name = _ref.name,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'md' : _ref$size,
    color = _ref.color,
    onClick = _ref.onClick,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? '' : _ref$className,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(''),
    _useState2 = _slicedToArray(_useState, 2),
    svgContent = _useState2[0],
    setSvgContent = _useState2[1];
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function () {
    // 아이콘 파일 경로 설정
    var iconPath = "/shared/tokens/icons/".concat(name, ".svg");

    // SVG 파일 가져오기
    fetch(iconPath).then(function (response) {
      if (!response.ok) {
        throw new Error("\uC544\uC774\uCF58\uC744 \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4: ".concat(name));
      }
      return response.text();
    }).then(function (svgText) {
      // SVG 문자열에서 불필요한 속성 제거
      var cleanedSvg = svgText.replace(/<svg[^>]*>/, '<svg>') // svg 태그에서 모든 속성 제거
      .replace(/width="[^"]*"/, '') // width 속성 제거
      .replace(/height="[^"]*"/, '') // height 속성 제거
      .replace(/fill="[^"]*"/g, ''); // fill 속성 제거

      setSvgContent(cleanedSvg);
    })["catch"](function (error) {
      console.error('아이콘 로딩 에러:', error);
      setSvgContent('<svg><path d="M0 0h24v24H0z" /></svg>'); // 에러 시 빈 아이콘
    });
  }, [name]);
  var iconClasses = ['icon', "icon-".concat(size), className].filter(Boolean).join(' ');

  // 스타일 속성 설정
  var iconStyle = {
    // color 속성이 제공되면 사용, 아니면 부모 요소로부터 전달된 --icon-color 변수 사용
    '--icon-current-color': color || 'var(--icon-color, currentColor)'
  };
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", _extends({
    className: iconClasses,
    onClick: onClick,
    style: iconStyle,
    dangerouslySetInnerHTML: {
      __html: svgContent
    }
  }, rest));
};
Icon.propTypes = {
  name: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string).isRequired,
  size: prop_types__WEBPACK_IMPORTED_MODULE_2___default().oneOf(['xs', 'sm', 'md', 'lg', 'xl']),
  color: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string),
  onClick: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().func),
  className: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string)
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Icon);
;
Icon.__docgenInfo = {
  "description": "Icon 컴포넌트 - SVG 아이콘을 표시하고 시멘틱 토큰으로 색상을 제어합니다.\r\n\r\n@param {Object} props - 컴포넌트 속성\r\n@param {string} props.name - 아이콘 이름 (경로 포함, 예: \"line-icons/home\")\r\n@param {string} props.size - 아이콘 크기 (xs, sm, md, lg, xl)\r\n@param {string} props.color - CSS 색상 변수 또는 값 (var(--semantic-color-primary-foreground-1-rest) 등)\r\n@param {function} props.onClick - 클릭 이벤트 핸들러\r\n@param {string} props.className - 추가적인 CSS 클래스",
  "methods": [],
  "displayName": "Icon",
  "props": {
    "size": {
      "defaultValue": {
        "value": "'md'",
        "computed": false
      },
      "description": "",
      "type": {
        "name": "enum",
        "value": [{
          "value": "'xs'",
          "computed": false
        }, {
          "value": "'sm'",
          "computed": false
        }, {
          "value": "'md'",
          "computed": false
        }, {
          "value": "'lg'",
          "computed": false
        }, {
          "value": "'xl'",
          "computed": false
        }]
      },
      "required": false
    },
    "className": {
      "defaultValue": {
        "value": "''",
        "computed": false
      },
      "description": "",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "name": {
      "description": "",
      "type": {
        "name": "string"
      },
      "required": true
    },
    "color": {
      "description": "",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "onClick": {
      "description": "",
      "type": {
        "name": "func"
      },
      "required": false
    }
  }
};

/***/ })

});
//# sourceMappingURL=design-systems_system-1_components_primitives_Button_index_jsx.44661757a1b24b75846a.hot-update.js.map