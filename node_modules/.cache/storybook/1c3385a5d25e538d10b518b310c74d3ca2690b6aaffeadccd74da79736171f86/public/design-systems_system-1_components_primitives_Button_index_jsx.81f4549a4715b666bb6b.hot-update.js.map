{"version":3,"file":"design-systems_system-1_components_primitives_Button_index_jsx.81f4549a4715b666bb6b.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAXA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AAEA;AACA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://lds/./design-systems/system-1/components/primitives/Button/index.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Icon from '../../../../../shared/components/Icon';\nimport './Button.css';\n\n/**\n * 버튼 컴포넌트\n * @param {object} props - 컴포넌트 속성\n * @param {'filled'|'outlined'|'transparent'} props.style - 버튼 스타일\n * @param {'xs'|'sm'|'md'|'lg'|'xl'} props.size - 버튼 크기\n * @param {boolean} props.fullWidth - 전체 너비 적용 여부\n * @param {boolean} props.disabled - 비활성화 여부\n * @param {boolean} props.leftIcon - 왼쪽 아이콘 표시 여부\n * @param {boolean} props.rightIcon - 오른쪽 아이콘 표시 여부\n * @param {boolean} props.iconOnly - 아이콘만 표시 여부\n * @param {React.ReactNode} props.children - 버튼 내용\n * @param {function} props.onClick - 클릭 이벤트 핸들러\n */\nconst Button = ({\n  variant = 'primary',\n  style = 'filled',\n  size = 'md',\n  fullWidth = false,\n  disabled = false,\n  leftIcon = false,\n  rightIcon = false,\n  iconOnly = false,\n  children,\n  onClick,\n  ...rest\n}) => {\n  const buttonClasses = [\n    'btn',\n    `btn-${variant}`,\n    `btn-${style}`,\n    `btn-${size}`,\n    fullWidth ? 'btn-full-width' : '',\n    iconOnly ? 'btn-icon-only' : '',\n  ].filter(Boolean).join(' ');\n\n  // 아이콘 크기는 버튼 크기보다 한 단계 작게 설정\n  const getIconSize = (btnSize) => {\n    const sizeMap = {\n      xs: 'xs',\n      sm: 'xs',\n      md: 'sm',\n      lg: 'md',\n      xl: 'lg'\n    };\n    return sizeMap[btnSize] || 'sm';\n  };\n\n  // 버튼 타입에 따른 기본 아이콘 선택\n  const getDefaultIcon = (type) => {\n    const iconMap = {\n      leftIcon: {\n        primary: 'line-icons/home',\n        secondary: 'line-icons/settings', \n        cta: 'line-icons/checkmark'\n      },\n      rightIcon: {\n        primary: 'line-icons/arrow/arrow-right',\n        secondary: 'line-icons/arrow/arrow-right',\n        cta: 'line-icons/arrow/arrow-right'\n      },\n      iconOnly: {\n        primary: 'line-icons/home',\n        secondary: 'line-icons/settings',\n        cta: 'line-icons/checkmark'\n      }\n    };\n    \n    return iconMap[type][variant] || iconMap[type].primary;\n  };\n\n  // 버튼 타입에 따른 아이콘 색상 선택\n  const getIconColor = () => {\n    // 모든 버튼 타입에서 텍스트와 동일한 색상 사용\n    return 'inherit';\n  };\n\n  const iconSize = getIconSize(size);\n  const iconColor = getIconColor();\n\n  // iconOnly인 경우 버튼 내용은 아이콘만 표시\n  if (iconOnly) {\n    return (\n      <button \n        className={buttonClasses} \n        disabled={disabled}\n        onClick={onClick}\n        {...rest}\n        aria-label={typeof children === 'string' ? children : 'Icon button'}\n      >\n        <span className=\"btn-icon\">\n          <Icon name={getDefaultIcon('iconOnly')} size={iconSize} color={iconColor} />\n        </span>\n      </button>\n    );\n  }\n\n  return (\n    <button \n      className={buttonClasses} \n      disabled={disabled}\n      onClick={onClick}\n      {...rest}\n    >\n      {leftIcon && (\n        <span className=\"btn-icon btn-icon-left\">\n          <Icon name={getDefaultIcon('leftIcon')} size={iconSize} color={iconColor} />\n        </span>\n      )}\n      <span className=\"btn-text\">{children}</span>\n      {rightIcon && (\n        <span className=\"btn-icon btn-icon-right\">\n          <Icon name={getDefaultIcon('rightIcon')} size={iconSize} color={iconColor} />\n        </span>\n      )}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  style: PropTypes.oneOf(['filled', 'outlined', 'transparent']),\n  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\n  fullWidth: PropTypes.bool,\n  disabled: PropTypes.bool,\n  leftIcon: PropTypes.bool,\n  rightIcon: PropTypes.bool,\n  iconOnly: PropTypes.bool,\n  children: PropTypes.node,\n  onClick: PropTypes.func\n};\n\nexport default Button; "],"names":[],"sourceRoot":""}