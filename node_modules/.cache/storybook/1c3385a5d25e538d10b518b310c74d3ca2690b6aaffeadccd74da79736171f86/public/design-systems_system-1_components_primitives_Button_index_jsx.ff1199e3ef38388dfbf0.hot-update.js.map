{"version":3,"file":"design-systems_system-1_components_primitives_Button_index_jsx.ff1199e3ef38388dfbf0.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAMA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://lds/./shared/components/Icon/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Icon.css';\r\n\r\n/**\r\n * Icon 컴포넌트 - SVG 아이콘을 표시하고 시멘틱 토큰으로 색상을 제어합니다.\r\n * \r\n * @param {Object} props - 컴포넌트 속성\r\n * @param {string} props.name - 아이콘 이름 (경로 포함, 예: \"line-icons/home\")\r\n * @param {string} props.size - 아이콘 크기 (xs, sm, md, lg, xl)\r\n * @param {string} props.color - CSS 색상 변수 또는 값 (var(--semantic-color-primary-foreground-1-rest) 등)\r\n * @param {function} props.onClick - 클릭 이벤트 핸들러\r\n * @param {string} props.className - 추가적인 CSS 클래스\r\n */\r\nconst Icon = ({ name, size = 'md', color, onClick, className = '', ...rest }) => {\r\n  const [svgContent, setSvgContent] = useState('');\r\n  \r\n  useEffect(() => {\r\n    // 아이콘 파일 경로 설정\r\n    const iconPath = `/shared/tokens/icons/${name}.svg`;\r\n    \r\n    // SVG 파일 가져오기\r\n    fetch(iconPath)\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error(`아이콘을 찾을 수 없습니다: ${name}`);\r\n        }\r\n        return response.text();\r\n      })\r\n      .then(svgText => {\r\n        // SVG 문자열에서 불필요한 속성 제거\r\n        const cleanedSvg = svgText\r\n          .replace(/<svg[^>]*>/, '<svg>')  // svg 태그에서 모든 속성 제거\r\n          .replace(/width=\"[^\"]*\"/, '')    // width 속성 제거\r\n          .replace(/height=\"[^\"]*\"/, '')   // height 속성 제거\r\n          .replace(/fill=\"[^\"]*\"/g, '');   // fill 속성 제거\r\n        \r\n        setSvgContent(cleanedSvg);\r\n      })\r\n      .catch(error => {\r\n        console.error('아이콘 로딩 에러:', error);\r\n        setSvgContent('<svg><path d=\"M0 0h24v24H0z\" /></svg>'); // 에러 시 빈 아이콘\r\n      });\r\n  }, [name]);\r\n\r\n  const iconClasses = [\r\n    'icon',\r\n    `icon-${size}`,\r\n    className\r\n  ].filter(Boolean).join(' ');\r\n  \r\n  // 스타일 속성 설정\r\n  const iconStyle = {\r\n    // color 속성이 제공되면 사용, 아니면 부모 요소로부터 전달된 --icon-color 변수 사용\r\n    '--icon-current-color': color || 'var(--icon-color, currentColor)'\r\n  };\r\n  \r\n  return (\r\n    <div \r\n      className={iconClasses}\r\n      onClick={onClick}\r\n      style={iconStyle}\r\n      dangerouslySetInnerHTML={{ __html: svgContent }}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nIcon.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  size: PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl']),\r\n  color: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string\r\n};\r\n\r\nexport default Icon; "],"names":[],"sourceRoot":""}